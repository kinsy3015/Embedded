flow for jetson_csi_our_product_module_driver_ros_msgs_out


raspberry pi 4 ( model b+ ):

User Space : libcamera, libcamera-apps



kernel : v4l2 framework - raspberry_pi_camera_v2_driver( Sony-IMX219-Raspberry-Pi-V2-CMOS ) - csi(camera interface ( similar protocol )



hardware : i2c, (pci)



jetson nano ( 4gb ):

User Space : ArgosVue library ( not yet... )



kernel : v4l2 framework - our_product_driver - csi(camera interface ( similar protocol )



hardware : i2c, (pci)








=========================================================================================================================================================

github keyword list :

Raspberry Pi 


RPi-Distro 


RPi-Distro / RTIMULib 

RTIMULib 

camera csi


rt-net / JetsonNano_DT_SPI 


google search keywords :


pi camera v2 csi example

csi kernel code


git clone :

wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.19.237.tar.xz
git clone https://github.com/raspberrypi/libcamera-apps.git
git clone https://github.com/rellimmot/Sony-IMX219-Raspberry-Pi-V2-CMOS.git
git clone https://github.com/pcdangio/ros-driver_mpu9250.git
git clone https://github.com/jetsonhacks/RTIMULib.git
git clone https://github.com/RPi-Distro/raspi-config.git
git clone https://github.com/RTIMULib/RTIMULib-Arduino.git


reference site :

https://www.kernel.org/doc/html/v4.10/media/kapi/csi2.html
https://slowbootkernelhacks.blogspot.com/2020/06/pi-camera-sensor-camera-device-driver.html


======================================================================================================

sudo apt-get install libi2c-dev
sudo apt-get install python-smbus python3-smbus
sudo apt-get install i2c-tools

===============================================================================================================


conclusion :
RTIMULibGL => src/JHPWMPCA9685=>  i2c_write_byte_data 
=> linux/i2c/smbus.h => i2c_write_byte_data(int file, __u8 command, __u8 value)
=> but RTIMULibGL => i2c_write_byte_data(int, int, int)


ros-driver_mpu9250 => rpi_driver.cpp => i2c_write_byte_data => pigpio => pigpio_if2.c => i2c_write_byte_data(int pi, unsigned handle, unsigned reg, uint32_t val)

